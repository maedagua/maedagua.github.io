# .github/workflows/generate-website.yml
name: Generate Jekyll Website

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  workflow_dispatch: # Allows manual triggering
  push: # Trigger on every push to the repository

jobs:
  build_website:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Clean source_repo directory
        run: python cli.py clean

      - name: Generate website content
        run: python cli.py generate --config config.yml

      - name: Verify generated site_contents directory
        run: |
          echo "Current directory after content generation:"
          pwd
          echo "Listing contents of 'site_contents' before upload:"
          ls -la site_contents
          if [ ! -d "site_contents" ]; then
            echo "Error: 'site_contents' directory does not exist after generation!"
            exit 1
          fi
          if [ -z "$(ls -A site_contents)" ]; then
            echo "Warning: 'site_contents' directory is empty. Nothing will be deployed."
            # Optionally, you could exit here if an empty site is always an error
            # exit 1
          fi

      - name: Upload website artifact
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-site-contents
          path: site_contents
          # retention-days: 1 # Uncomment if you want shorter retention

      - name: List artifacts after upload
        # This step uses the GitHub CLI to list artifacts for the current run
        # Requires permissions: actions: read
        run: |
          gh auth setup-git
          gh api \
            --method GET \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
            | jq '.artifacts[] | {name, size_in_bytes, created_at}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}